module bamboo.codegen.frontend;

import bamboo.codegen;

/// Generates D source code from a given module.  It will optionally declare a D module.
/// This utility function also imports codegen helpers and privately aliases dclass primitives.
/// This function is suitable for creating a self-contained file.
/// See_Also: $(D generateModule).
string generateFile(Module file, string moduleName = "",
        string distributedObjectModule = "libastrond", string baseType = "",
        bool generateStubs = true)
{
    string format;

    if (moduleName.length == 0)
    {
        moduleName = file.symbol;
    }

    format ~= "// This code was generated by a tool.\n";
    if (moduleName.length > 0)
    {
        format ~= "module ";
        format ~= moduleName;
        format ~= ";";
    }
    format ~= "import std.exception;";
    format ~= "import bamboo.codegen;";
    format ~= "import " ~ distributedObjectModule ~ ";";

    foreach (imprt; file.importDeclarations)
    {
        if (imprt.packageName == moduleName)
        {
            continue;
        }
        format ~= "import " ~ imprt.packageName ~ " : ";
        foreach (type; imprt.symbols[0 .. $ - 1])
        {
            format ~= type ~ ", ";
        }
        format ~= imprt.symbols[$ - 1] ~ ";";
    }

    format ~= "private { mixin(Primitives); }";
    format ~= generateModule(file, baseType, generateStubs);

    return format;
}

/// Ditto.
string generateFile(string dcFile, string moduleName = "",
        string distributedObjectModule = "libastrond", string baseType = "",
        bool generateStubs = true)
{
    import bamboo.astgen : parseModule;

    Module file = parseModule(dcFile);
    return generateFile(file, moduleName, distributedObjectModule, baseType, generateStubs);
}

/// Generates D source code from a given module. This function is 
/// suitable for mixing into a larger D source file.
/// See_Also: $(D generateFile).
string generateModule(Module file, string baseType = "", bool generateStubs = true)
{
    string format;

    format ~= "import std.typecons;";

    if (file.keywords.length)
    {
        format ~= " enum {";
        foreach (id, keyword; file.keywords)
        {
            format ~= q{%1$s = 1 << %2$s,}.format(keyword.symbol, id + 1);
        }
        format ~= "} ";
    }

    foreach (type; file.typesById)
    {
        if (auto cls = cast(ClassDeclaration) type)
        {
            format ~= generateClass(cls, baseType, generateStubs);
        }
        else if (auto strct = cast(StructDeclaration) type)
        {
            format ~= generateStruct(strct);
        }
    }

    return format;
}

/// Ditto.
string generateModule(string dcFile, string baseType = "", bool generateStubs = true)
{
    import bamboo.astgen : parseModule;

    Module file = parseModule(dcFile);
    return generateModule(file, baseType, generateStubs);
}
